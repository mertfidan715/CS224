/*
Configuration for the code below:

Connect portA to J1 Port of 4 Digit Seven Segment Module
Jumpers of portA are : 5V, pull down ( top one to left, other to right )

Connect portE to J2 Port of 4 Digit Seven Segment Module
Jumpers of portE are : 5V, pull down ( top one to left, other to right )

*/

// Hexadecimal values for digits in 7 segment
unsigned char binary_pattern[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

int cube(int input){
    return (input * input * input);
}

void main() {

 AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O
 JTAGEN_bit = 0;        // Disable JTAG
 TRISA = 0x00;  //portA is output to D
 TRISE = 0X00;  //portE is output to AN

 while(1)
 {
     for(int i = 1; i <=21; i++){
         int number = i;
         int cube = cube(number);
         int in1 = cube / 10;
         cube = cube / 10;
         int in2 = cube / 10;
         cube = cube / 10;
         int in3 = cube / 10;
         cube = cube / 10;
         int in4 = cube / 10;
         cube = cube / 10;
         // Digit 1
         PORTA=binary_pattern[in1];     // Put 2 to the second digit
         PORTE=0x01;                  // Open second digit
         Delay_ms(1);

         // Digit 2
         PORTA=binary_pattern[in2];     // Put 2 to the second digit
         PORTE=0x0A;                  // Open second digit
         Delay_ms(1);

         // Digit 3
         PORTA=binary_pattern[in3];
         PORTE=0x02;
         Delay_ms(1);

         // Digit 4
         PORTA=binary_pattern[in4];
         PORTE=0x09;
         Delay_ms(2000);
     }
 }

}//main
#################################################################################
#include <p32xxxx.h>
#include <plib.h>
#include <xc.h>

#define BTN0 PORTGbits.RG6  // Button 0 on PORTG bit 6
#define BTN1 PORTGbits.RG7  // Button 1 on PORTG bit 7
#define MOTOR_FORWARD 0
#define MOTOR_REVERSE 1
#define MOTOR_STOP 2

void setup()
{
    AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O
    JTAGEN_bit = 0;        // Disable JTAG

    TRISEbits.TRISE0 = 1;   // Configure BTN0 as input
    TRISEbits.TRISE1 = 1;   // Configure BTN1 as input

    // Configure Output Pins for Motor Control
    TRISCbits.TRISC0 = 0;   // Configure pin RD0 as output for motor control
    TRISCbits.TRISC1 = 0;   // Configure pin RD1 as output for motor control

    LATCbits.LATC0 = 0;      // Initialize motor control pins to 0
    LATCbits.LATC1 = 0;
}

int main()
{
    setup();

    while (1)
    {
        if (PORTEbits.RE0 == 0 && PORTEbits.RE7 == 1)     // BTN0 is pressed, BTN1 is not pressed
        {
            LATCbits.LATC0 = 1;   // Set motor control pins to turn motor counterclockwise
            LATCbits.LATC1 = 0;
        }
        else if (PORTEbits.RE0 == 1 && PORTEbits.RE1 == 0)    // BTN1 is pressed, BTN0 is not pressed
        {
            LATCbits.LATC0 = 0;   // Set motor control pins to turn motor clockwise
            LATCbits.LATC1 = 1;
        }
        else if (PORTEbits.RE0 == 1 && PORTEbits.RE1 == 1)    // Both buttons are pressed
        {
            LATCbits.LATC0 = 0;   // Set motor control pins to stop motor
            LATCbits.LATC1 = 0;
        }
    }
    return 0;
}
