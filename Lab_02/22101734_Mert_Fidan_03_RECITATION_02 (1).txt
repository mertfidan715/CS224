	.text
main:
	la $a0, str1
	li $v0, 4
	syscall
	
	li $v0, 5	
	syscall
	
	add $a0, $0, $v0
	add $s0, $0, $a0
	add $s2, $0, $a0
	mul $a0, $a0, 4
	li $v0, 9	
	syscall
	
	add $a1, $0, $v0
	add $s1, $0, $a1
	add $s3, $0, $a1
	jal CreateArray
	jal PrintArray

	la $a0, str2
	li $v0, 4
	syscall
	
	li $v0, 5	
	syscall
	
	add $a0, $0, $v0
	add $s0, $0, $a0
	mul $a0, $a0, 4
	li $v0, 9	
	syscall
	
	add $a1, $0, $v0
	add $s1, $0, $a1
	jal CreateArray
	jal PrintArray
	
	jal CalculateDistance
	
	move $a0, $s0
	move $a1, $s1
	jal entryCheck
	
	li $v0, 10	
	syscall
	
CreateArray:
	addi $sp, $sp, -12
	sw $ra, 0($sp)
	sw $s1, 4($sp)
	sw $s0 8($sp)
	jal InitializeArray
	lw $ra, 0($sp)
	lw $s1, 4($sp)
	lw $s0 8($sp)
	addi $sp, $sp, 12
	jr $ra
	
InitializeArray:
	addi $sp, $sp, -16
	sw $ra, 12($sp)
	sw $s1, 8($sp) #s1 = starting address of the array
	sw $s2, 4($sp) #s2 = i
	sw $s3, 0($sp) #s3 = input element
	addi $s2, $0, 0
	whileInit: 
		beq $s2, $s0, doneInit
		la $a0, str3
		li $v0, 4
		syscall
	
		li $v0, 5	
		syscall	
		add $s3, $0, $v0
		sw $s3, 0($s1)
		addi $s1, $s1, 4
		addi $s2, $s2, 1 
		j whileInit
	doneInit:
		lw $ra, 12($sp)
		lw $s1, 8($sp) 
		lw $s2, 4($sp) 
		lw $s3, 0($sp) 
		addi $sp, $sp, 16
		jr $ra

PrintArray:
	addi $sp, $sp, -16
	sw $ra, 12($sp) #saving return address
	sw $s1, 8($sp) #s1 = starting address of the array
	sw $s2, 4($sp) #s2 = i
	sw $s3, 0($sp)
	addi $s2, $0, 0
	la $a0, str4.1
	li $v0, 4
	syscall		
	whilePrint:
		beq $s2, $s0, donePrint
		lw $s3, 0($s1)
		la $a0, 0($s3)
		li $v0, 1	
		syscall
		la $a0, str4.2
		li $v0, 4
		syscall		
		addi $s1, $s1, 4
		addi $s2, $s2, 1
		j whilePrint
	donePrint:
		lw $ra, 12($sp) #reloading return address
		lw $s1, 8($sp) #relading s1 = starting address of the array
		lw $s2, 4($sp) #relading s2 
		lw $s3, 0($sp)
		addi $sp, $sp, 16 #deallocating sp
		jr $ra
		
CalculateDistance:
	addi $sp, $sp, -36
	sw $ra, 32($sp)
	sw $s0, 28($sp) 
	sw $s1, 24($sp)
	sw $s2, 20($sp)
	sw $s3, 16($sp)
	sw $s4, 12($sp)
	sw $s5, 8($sp)
	sw $s6, 4($sp)
	sw $s7, 0($sp)
	addi $s4, $0, 0 # s4 = i
	addi $s5, $0, 0 #s5 = hamming distance
	bne $s0, $s2, notEqualSize
	whileCalculate:
		beq $s4, $s0, calculate
		lw $s6, 0($s3)
		lw $s7, 0($s1)
		addi $s4, $s4, 1
		addi $s3, $s3, 4
		addi $s1, $s1, 4		
		beq $s6, $s7, whileCalculate			
		addi $s5, $s5, 1
		j whileCalculate
	notEqualSize:
		la $a0, str6
		li $v0, 4
		syscall
		j doneCalculate
	calculate:
		la $a0, str5
		li $v0, 4
		syscall		
		la $a0, 0($s5)
		li $v0, 1	
		syscall
		j doneCalculate
	doneCalculate:
		la $a0, str4.2
		li $v0, 4
		syscall
		lw $ra, 32($sp)
		lw $s0, 28($sp) 
		lw $s1, 24($sp)
		lw $s2, 20($sp)
		lw $s3, 16($sp)
		lw $s4, 12($sp)
		lw $s5, 8($sp)
		lw $s6, 4($sp)
		lw $s7, 0($sp)
		addi $sp, $sp, 36		
		jr $ra	
		
entryCheck:
	addi $sp, $sp, -36
	sw $ra, 32($sp)
	sw $s0, 28($sp)
	sw $s1, 24($sp)
	sw $s2, 20($sp)
	sw $s3, 16($sp)
	sw $s4, 12($sp)
	sw $s5, 8($sp)
	sw $s6, 4($sp)
	sw $s7, 0($sp)
	addi $s0, $a0, 0 #s0 = input array size
	addi $s1, $a1, 0 #s1 = input array starting address
	la $a0, str7
	li $v0, 4
	syscall
	li $v0, 5	
	syscall
	addi $s2, $v0, 0 #s2 = input index
	addi $s3, $0, 0 #s3 = i
	addi $s4, $0, 0 #s4 = count
	addi $s5, $0, 0 #s5 = current array item
	mul $s7, $s2, 4
	add $s1, $s1, $s7
	lw $s6, 0($s1) #s6 = item at input index
	sub $s1, $s1, $s7
whileEntryCheck:
	beq $s3, $s0, doneEntryCheck
	lw $s5, 0($s1)
	addi $s3, $s3, 1
	addi $s1, $s1, 4
	bne $s6, $s5, whileEntryCheck
	addi $s4, $s4, 1
	j whileEntryCheck 
doneEntryCheck:
	la $a0, str8
	li $v0, 4
	syscall
	la $a0, 0($s4)
	li $v0, 1	
	syscall	
	lw $ra, 32($sp)
	lw $s0, 28($sp)
	lw $s1, 24($sp)
	lw $s2, 20($sp)
	lw $s3, 16($sp)
	lw $s4, 12($sp)
	lw $s5, 8($sp)
	lw $s6, 4($sp)
	lw $s7, 0($sp)
	addi $sp, $sp, 36
	jr $ra
	
	
	.data
str1:	.asciiz "Please enter the size of array 1: "
str2:	.asciiz "Please enter the size of array 2: "
str3:	.asciiz "Please enter an element to the array: "
str4.1: .asciiz "Elements of the array:\n"
str4.2:	.asciiz "\n"
str5:	.asciiz "Hamming distance between two arrays: "
str6:	.asciiz "The arrays do not have equal size."
str7:	.asciiz "Enter index position: "
str8:	.asciiz "\nNumber of array items equal to the item at input index: "

###############################################################################
	.text
main:

	jal RegisterHammingDistance
	
	li $v0, 10
	syscall
RegisterHammingDistance:
	addi $sp, $sp, -20
	sw $s0, 16($sp)
	sw $s1, 12($sp)
	sw $s2, 8($sp)
	sw $s3, 4($sp)
	sw $s4, 0($sp)
	la $a0, str1
	li $v0, 4
	syscall
	
	li $v0, 5	
	syscall
	add $s0, $0, $v0
	la $a0, str2
	li $v0, 4
	syscall
	
	li $v0, 5	
	syscall
	add $s1, $0, $v0
	xor $s2, $s0, $s1
    	addi $s3, $0, 0 #s3 = distance
	while:	
		beq $s2, $0, done
        	andi $s4, $s2, 1  # check the rightmost bit
        	srl $s2, $s2, 1   # shift the bits to the right
        	beq $s4, 0, while
        	add $s3, $s3, 1 # add 1 to distance if current rightmost bit is 1
		j while
	done:
		la $a0, str3
		li $v0, 4
		syscall
		la $a0, ($s0)
		li $v0, 34
		syscall
		la $a0, str4
		li $v0, 4
		syscall
		la $a0, ($s1)
		li $v0, 34
		syscall
		la $a0, str5
		li $v0, 4
		syscall
		la $a0, 0($s3)
		li $v0, 1
		syscall
		la $a0, check
		li $v0, 4
		syscall
	
		li $v0, 5	
		syscall
		lw $s0, 16($sp)
		lw $s1, 12($sp)
		lw $s2, 8($sp)
		lw $s3, 4($sp)
		lw $s4, 0($sp)
		addi $sp, $sp, 20
		beq $v0, 1, RegisterHammingDistance
		jr $ra
	
	.data
str1:	.asciiz "Please enter first value to be assigned to $s0: "
str2:	.asciiz "Please enter second value to be assigned to $s1: "
str3:	.asciiz "Item at the register $s0 in HEX: "
str4:	.asciiz "\nItem at the register $s1 in HEX: "
str5:	.asciiz "\nHamming distance between $s0 and $s1: "
check:	.asciiz "\nDo you want to continue? 1 for YES, 2 for NO: "

