####################################################
	.text
main:
	la $a0, str1
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	move $a1, $v0
	jal RegisterCount
	move $s0, $v1
	
	la $a0, str2
	li $v0, 4
	syscall
	move $a0, $s0
	li $v0, 1
	syscall
	la $a0, str3
	li $v0, 4
	syscall
	li $v0, 10
	syscall
RegisterCount:
	addi $sp, $sp -28
	sw $s0, 24($sp)
	sw $s1, 20($sp)
	sw $s2, 16($sp)
	sw $s3, 12($sp)
	sw $s4, 8($sp)
	sw $s5, 4($sp)
	sw $ra, 0($sp)
start:
	la $s0, start
	addi $s1, $0, 20 
	add $t0, $t0, $t1
	add $t0, $t0, $t0
	sub $t4, $t0, $t4
last:	la $s1, last + 4
next:
	bgt $s0, $s1, done
	lw $s2, 0($s0)
	srl $s2, $s2, 26 #s2 = opcode of current instruction
	beq $s2, $0, RType
	j JType
RType:
	lw $s3, 0($s0)
	sll $s3, $s3, 6
	srl $s3, $s3, 27 #s3 = rs field
	lw $s4, 0($s0)
	sll $s4, $s4, 11
	srl $s4, $s4, 27 #s4 = rt field
	lw $s5, 0($s0)
	sll $s5, $s5, 16
	srl $s5, $s5, 27 #s3 = rd field
Rcheck1:
	bne $s3, $a1, Rcheck2
	addi $v1, $v1, 1
	j Rcheck2
Rcheck2:
	bne $s4, $a1, Rcheck3
	addi $v1, $v1, 1
	j Rcheck3
Rcheck3:
	bne $s5, $a1, doneRCheck
	addi $v1, $v1, 1
	j doneRCheck
doneRCheck:
	j iterLoop
JType: 
check1:
	bne $s2, 2, check2
	j iterLoop
check2:
	bne $s2, 3, IType
	j iterLoop	 
IType:
	lw $s3, 0($s0)
	sll $s3, $s3, 6
	srl $s3, $s3, 27 #s3 = rs field
	lw $s4, 0($s0)
	sll $s4, $s4, 11
	srl $s4, $s4, 27 #s4 = rt field
Icheck1:
	bne $s3, $a1, Icheck2
	addi $v1, $v1, 1
	j Icheck2
Icheck2:
	bne $s4, $a1, doneICheck
	addi $v1, $v1, 1
	j doneICheck
doneICheck:
	j iterLoop
iterLoop:
	move $a0, $s2	
	li $v0, 34
	syscall	
	la $a0, newLn
	li $v0, 4
	syscall	
	addi $s0, $s0, 4
	j next
done:
	lw $s0, 24($sp)
	lw $s1, 20($sp)
	lw $s2, 16($sp)
	lw $s3, 12($sp)
	lw $s4, 8($sp)
	lw $s5, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp 28
	jr $ra

	.data
str1:	.asciiz "Please enter a register number(from 1 to 31): "
str2:	.asciiz "The entered register is used "
str3:	.asciiz " times in the subprogram."
newLn:	.asciiz "\n"
#####################################################################
	.text
main:
	li $a0, 65	
	li $a1, 12
	jal recursiveDivision
	move $s0, $v0
	move $s1, $v1
	
	li $v0, 10
	syscall
	
recursiveDivision:
	addi $sp, $sp, -16
	sw $s0, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $ra, 0($sp)
	slt $s0, $a0, $a1
	beq $s0, 0, else
	addi $v0, $0, 0
	addi $v1, $a0, 0
	addi $sp, $sp 16
	jr $ra
else:
	sub $a0, $a0, $a1
	jal recursiveDivision
	lw $s0, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 16
	addi $v0, $v0, 1
	jr $ra
	
	.data
str1:	.asciiz "Please enter divident($a0): "
str2:	.asciiz "\nPlease enter divisor($a1): "
str3:	.asciiz "\nQuotient of division is: "
str4:	.asciiz "\nRemainder of division is: "
####################################################
	.text
# CS224, Program to be used in Recitation 3
# March 20, 2023

	li	$a0, 5 	#create a linked list with 10 nodes
	jal	createLinkedList
	move $s0, $v0
# Linked list is pointed by $v0
	#move	$a0, $v0	# Pass the linked list address in $a0
	#jal 	printLinkedList
	
	move $a0, $s0
	lw $a1, 0($a0)
	jal ReverseLinkedList
	move $s1, $v0
	#jal DeleteMultipleEntries
	#move $a0, $s0
	#jal PrintInReverseOrder
	
	#move $a0, $s0
	#jal CopyAllExcept_x
	#move $a0, $v0
	#jal printLinkedList
	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	sll	$s4, $s1, 2	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	la 	$a0, getHead
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall 
	sw	$v0, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	sll	$s4, $s1, 2	
	la 	$a0, getItem
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall 
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$v0, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
CopyAllExcept_x:
	addi $sp, $sp, -36
	sw $s0, 32($sp)
	sw $s1, 28($sp)	
	sw $s2, 24($sp)	
	sw $s3, 20($sp)	
	sw $s4, 16($sp)
	sw $s5, 12($sp)
	sw $s6, 8($sp)
	sw $s7, 4($sp)
	sw $ra, 0($sp)
	move $s6, $a0 #s6 = address of input list
	lw $s0, 0($s6) #s0 = address of next node in input linked list
	lw $s1, 4($s6) #s1 = current input list item
	la $a0, str1
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	move $s2, $v0 #s2 = value to be excluded
initNewListHead:
	bne $s1, $s2, doneInitHead 
	addi $s6, $s6, 8
	lw $s0, 0($s6) 
	lw $s1, 4($s6)
	j initNewListHead
doneInitHead:
	li $a0, 8 
	li $v0, 9
	syscall
	move $s4, $v0 #s4 = address of first node of new list
	addi $s5, $s4, 0 #s5 = address iterator for new list
	sw $s1, 4($s5) #add head item of new list 
	addi $s3, $0, 1 # new list node counter.
whileAdd:
	addi $s6, $s6, 8
	lw $s0, 0($s6) 
	lw $s1, 4($s6)	
	beq $s0, $zero, checkLastNode
	bne $s1, $s2, copyNode
	j whileAdd
copyNode:
	li $a0, 8 
	li $v0, 9
	syscall
	sw $v0, 0($s5)
	addi $s5, $s5, 8
	addi $s7, $s1, 0 #s7 = copied new node item
	sw $s7, 4($s5)
	addi $s3, $s3, 1 # new list node counter
	j whileAdd
checkLastNode:
	bne $s1, $s2, addLastNode
	sw $0, 0($s5)
	j doneCopy
addLastNode:
	li $a0, 8 
	li $v0, 9
	syscall
	sw $v0, 0($s5) #loading address of next node into current node
	addi $s5, $s5, 8
	addi $s7, $s1, 0 #s7 = copied new node item
	sw $0, 0($s5)
	sw $s7, 4($s5)
	addi $s3, $s3, 1 # new list node counter
	j doneCopy
doneCopy:
	addi $v0, $s4, 0
	addi $v1, $s3, 0
	lw $s0, 32($sp)
	lw $s1, 28($sp)	
	lw $s2, 24($sp)	
	lw $s3, 20($sp)	
	lw $s4, 16($sp)
	lw $s5, 12($sp)
	lw $s6, 8($sp)
	lw $s7, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 36
	jr $ra
		
DeleteMultipleEntries:
	addi $sp, $sp, -24
	sw $s0, 20($sp)
	sw $s1, 16($sp)
	sw $s2, 12($sp)
	sw $s3, 8($sp)
	sw $s4, 4($sp)
	sw $s5, 0($sp)
	move $s0, $a0 #s0 = current node ptr
	lw $s1, 0($s0) #s1 = next node ptr
	lw $s2, 4($s0) #s2 = first node item
	lw $s3, 0($s0) #s3 = first node's next node address
	lw $s4, 4($s1) #s4 = second node item
	lw $s5, 0($s1) #s5 = second node's next node address
whileDelete:
	beq $s5, $zero, deleteLast
	bne $s2, $s4, increment
	sw $s5, 0($s0)
	sw $0, 4($s1)
	sw $0, 0($s1)
	addi $s1, $s1, 8
	lw $s4, 4($s1)
	lw $s5, 0($s1)
	lw $s3, 0($s0)
	j whileDelete
increment:
	addi $s0, $s1, 0
	lw $s1, 0($s0) #s1 = next node ptr
	lw $s2, 4($s0)
	lw $s3, 0($s0)
	lw $s4, 4($s1)
	lw $s5, 0($s1)
	j whileDelete
deleteLast:
	bne $s2, $s4, doneDelete
	sw $s5, 0($s0)
	sw $0, 4($s1)
	sw $0, 0($s1)
	j doneDelete
doneDelete:
	lw $s0, 20($sp)
	lw $s1, 16($sp)
	lw $s2, 12($sp)
	lw $s3, 8($sp)
	lw $s4, 4($sp)
	lw $s5, 0($sp)
	addi $sp, $sp, 24
	jr $ra
	
PrintInReverseOrder:
	addi $sp, $sp, -20
	sw $a0, 16($sp)
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $ra, 0($sp)
	move $s0, $a0
	lw $s1, 4($s0)
	lw $s2, 0($s0)
	bne $s2, $0, elsePrint
	jr $ra
elsePrint:
	addi $a0, $s2, 0
	jal PrintInReverseOrder
	la	$a0, line
	li	$v0, 4
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall
	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s2	# $s02 Address of next node
	li	$v0, 34
	syscall	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s2: Data of current node
	li	$v0, 1		
	syscall	
	lw $a0, 16($sp)
	lw $s0, 12($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	jr $ra

ReverseLinkedList:
	addi $sp, $sp, -36
	sw $a0, 32($sp)
	sw $a1, 28($sp)
	sw $s0, 24($sp)
	sw $s1, 20($sp)
	sw $s2, 16($sp)
	sw $s3, 12($sp)
	sw $s4, 8($sp)
	sw $s5, 4($sp)
	sw $ra, 0($sp)
	move $s0, $a0
	move $s1, $a1
	lw $s2, 4($s0) #current node item
	lw $s3, 0($s0) #current node's next node address
	lw $s4, 4($s1) #next node item
	lw $s5, 0($s1) #next node's next node address
	bne $s5, $0, elseReverse
	addi $v0, $a1, 0
	jr $ra
elseReverse:
	addi $a0, $s3, 0
	addi $a1, $s5, 0
	jal ReverseLinkedList
	lw $a0, 32($sp)
	lw $a1, 28($sp)
	lw $s0, 24($sp)
	lw $s1, 20($sp)
	lw $s2, 16($sp)
	lw $s3, 12($sp)
	lw $s4, 8($sp)
	lw $s5, 4($sp)
	lw $ra, 0($sp)
	addi $s3, $0, 0
	sw $s3, 0($a0)
	addi $s5, $a0, 0
	sw $s5, 0($a1)
	addi $sp, $sp, 36
	jr $ra
	  	
	
	.data
line:	
	.asciiz "\n --------------------------------------"
getHead:
	.asciiz "Please enter the value for the head item: "
getItem:
	.asciiz "Please enter an item value for the linked list: "
nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
str1:	.asciiz "\nPlease enter value to be excluded: "
###################################################################